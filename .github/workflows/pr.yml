name: Pull Request Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  issues: write
  checks: write
  pull-requests: write

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  validate-pr:
    name: Validate Pull Request
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Run tests with coverage
      run: dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory ./test-results

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.4
      with:
        reports: './test-results/**/coverage.cobertura.xml'
        targetdir: './coverage-report'
        reporttypes: 'HtmlInline;Cobertura;MarkdownSummaryGithub'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: ./coverage-report/SummaryGithub.md

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        directory: ./test-results
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results
        path: './test-results/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          ./test-results/**/*
          ./coverage-report/**/*
        retention-days: 30

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: validate-pr
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Run quality analysis
      id: quality-check
      run: |
        # Add any additional quality checks here
        echo "All quality gates passed"
        echo "quality-passed=true" >> $GITHUB_OUTPUT

    - name: Quality Gate Status
      if: steps.quality-check.outputs.quality-passed != 'true'
      run: |
        echo "Quality gate failed"
        exit 1