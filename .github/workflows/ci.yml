name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read
  issues: write
  checks: write
  pull-requests: write

env:
  DOTNET_VERSION: '8.0.x'
  BUILD_CONFIGURATION: 'Release'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['8.0.x']
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Run tests with coverage and xml output
      run: dotnet test --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --verbosity normal --logger "trx;LogFileName=TestResults.xml" --collect:"XPlat Code Coverage" --results-directory ./coverage

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test Results (${{ matrix.os }})
        path: '**/TestResults.xml'
        reporter: dotnet-trx
        fail-on-error: true

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build for analysis
      run: |
        dotnet restore
        dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  package:
    name: Create NuGet Package
    runs-on: ubuntu-latest
    needs: [build-and-test, security-analysis]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Create NuGet package
      run: dotnet pack src/AbeckDev.Amadeus/AbeckDev.Amadeus.csproj --configuration ${{ env.BUILD_CONFIGURATION }} --no-build --include-symbols --include-source -p:PackageVersion=0.1.0-preview.${{ github.run_number }}

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: |
          **/*.nupkg
          **/*.snupkg
        retention-days: 30

  #publish-package:
  #  name: Publish NuGet Package
  #  runs-on: ubuntu-latest
  #  needs: [package]
  #  if: github.event_name == 'release'
  #  environment: production
  #  
  #  steps:
  #  - name: Download package artifacts
  #    uses: actions/download-artifact@v4
  #    with:
  #      name: nuget-packages
  #      path: ./packages
 #
 #   - name: Setup .NET
 #     uses: actions/setup-dotnet@v4
 #     with:
 #       dotnet-version: ${{ env.DOTNET_VERSION }}

#    - name: Publish to NuGet
#      run: dotnet nuget push "./packages/**/*.nupkg" --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }} --skip-duplicate
